---
bibliography: references.bib
---

# The Problem

```{=html}
<!-- 
Outlining the issue / weak point / problem to be solved by this proposal. This should be a compelling section that sets the reader up for the next section - the proposed solution!

It is important to cover:

 - [ ] What the problem is
 - [ ] Who it affects
 - [ ] Have there been previous attempts to resolve the problem
 - [ ] Why it should be tackled
-->
```
An example in-text citation [@wickham2016].

Packaging R packages for different operating systems and architectures is a
difficult and time-consuming task. Building binaries for various systems means
dealing with different compiler settings, managing platform-specific
dependencies, and ensuring everything works well across environments. This often
leads to inconsistencies and build failures, especially when system-level
dependencies are not clearly handled.

There have been efforts to ease this process. For example, organizations like
Posit and community projects such as r2u have made progress in automating binary
builds. However, these solutions have some drawbacks. The Posit Public Package
Manager does not manage system-level dependencies automatically, leaving that
work to users, while r2u only packages the current state of CRAN, which means
older package versions are not available.

Since R is used on many different operating systems and hardware platforms,
solving these issues is essential. One solution that seemed to tackle these
issues was to use Docker images in the build process. Docker can capture the
entire software environment—including all necessary dependencies—so that R
packages are built and run consistently on any system. This improves
reproducibility and makes deployment easier. However, using Docker alone does
not ensure full reproducibility, and its isolated containers can make
interactive, explorative work more challenging.

Additionally, it can be tough to deploy the same environment across multiple
computers, which is important for collaborative work and continuous integration.
Addressing these challenges will benefit a wide community of R users by providing 
more consistent and reliable package installations, ultimately leading to better 
reproducibility and user experience.


